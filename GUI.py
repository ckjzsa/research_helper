# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'v0.1.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox, QFileDialog
from json_to_csv import transcsv
import sys
from urllib.request import urlopen
import urllib
from bs4 import BeautifulSoup
import requests
import json
import regex as re


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(550, 600)
        # 保存csv
        # self.df_csv = pd.DataFrame(columns=["标题", "中文标题", "第一作者", "通讯作者", "第一单位", "链接"])

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 241, 241))
        self.groupBox.setObjectName("groupBox")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(80, 100, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(20, 70, 201, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(20, 20, 201, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.checkBox = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox.setEnabled(True)
        self.checkBox.setGeometry(QtCore.QRect(20, 50, 72, 17))
        self.checkBox.setChecked(False)
        self.checkBox.setObjectName("checkBox")
        self.progressBar = QtWidgets.QProgressBar(self.groupBox)
        self.progressBar.setGeometry(QtCore.QRect(60, 211, 171, 20))
        self.progressBar.setProperty("value", 24)
        self.progressBar.setObjectName("progressBar")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 130, 54, 12))
        self.label.setObjectName("label")
        self.checkBox_2 = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_2.setGeometry(QtCore.QRect(10, 150, 72, 17))
        self.checkBox_2.setObjectName("checkBox_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(120, 175, 100, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(10, 180, 100, 12))
        self.label_2.setObjectName("label_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 210, 40, 20))
        self.pushButton_3.setObjectName("pushButton_3")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(260, 10, 271, 241))
        self.groupBox_2.setObjectName("groupBox_2")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox_2)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 20, 251, 211))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 260, 521, 301))
        self.groupBox_3.setObjectName("groupBox_3")
        self.tableWidget = QtWidgets.QTableWidget(self.groupBox_3)
        self.tableWidget.setGeometry(QtCore.QRect(10, 20, 501, 251))
        self.tableWidget.setAutoScrollMargin(10)
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(5, item)

        self.tableWidget.horizontalHeader().setDefaultSectionSize(80)  # 调整列宽
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_2.setGeometry(QtCore.QRect(210, 275, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.timer = QtCore.QBasicTimer()

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 550, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.label_4 = QtWidgets.QLabel(MainWindow)
        self.label_4.setGeometry(QtCore.QRect(200, 580, 540, 12))
        self.label_4.setObjectName("label_4")

        self.function()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        QApplication.setStyle('windowvista')
        MainWindow.setWindowTitle("环境科研小助手")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "请选择或输入期刊："))
        self.pushButton.setText(_translate("MainWindow", "爬取期数"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Water Research"))
        self.comboBox.setItemText(1, _translate("MainWindow", "Chemical Engineering Journal"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Journal of Cleaner Production"))
        self.checkBox.setText(_translate("MainWindow", "输入网址"))
        self.label.setText(_translate("MainWindow", "期数选择"))
        self.checkBox_2.setText(_translate("MainWindow", "全部爬取"))
        self.label_2.setText(_translate("MainWindow", "输入期数"))
        self.pushButton_3.setText(_translate("MainWindow", "爬取"))
        self.label_4.setText(_translate("MainWindow", "开发：陈子纮 & 苦根"))
        self.groupBox_2.setTitle(_translate("MainWindow", "笔记空间"))
        self.groupBox_3.setTitle(_translate("MainWindow", "爬取结果"))
        # item = self.tableWidget.horizontalHeaderItem(0)
        # item.setText(_translate("MainWindow", "序号"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "标题"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "中文标题"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "第一作者"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "通讯作者"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "第一单位"))
        item = self.tableWidget.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "链接"))
        self.pushButton_2.setText(_translate("MainWindow", "导出csv"))

    def function(self):
        self.progressBar.setValue(0)
        if not self.checkBox.isChecked():
            self.lineEdit.setDisabled(True)
        self.checkBox.toggled.connect(self.comboBox.setDisabled)
        self.checkBox.stateChanged.connect(self.enable_line_edit)

        if not self.checkBox_2.isChecked():
            self.lineEdit_2.setDisabled(False)
        # self.checkBox_2.toggled.connect(self.comboBox.setDisabled)
        self.checkBox_2.stateChanged.connect(self.enable_line_edit)

        self.pushButton.clicked.connect(self.crawler_volume)
        self.pushButton_2.clicked.connect(self.output_csv)
        self.pushButton_3.clicked.connect(self.crawler_papers)

    def enable_line_edit(self):
        if self.checkBox.checkState() == Qt.Checked:
            self.lineEdit.setDisabled(False)
        else:
            self.lineEdit.setDisabled(True)

        if self.checkBox_2.checkState() == Qt.Checked:
            self.lineEdit_2.setDisabled(True)
        else:
            self.lineEdit_2.setDisabled(False)

    # insert,只是简单插入一个固定数据
    def table_insert(self, title, chn_title, first, ref, link, loc):
        row = self.tableWidget.rowCount()
        self.tableWidget.insertRow(row)

        item_title = QTableWidgetItem(title)
        # item_title.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEnabled)  # 设置物件的状态为只可被选择（未设置可编辑）
        item_chn_title = QTableWidgetItem(chn_title)
        item_first = QTableWidgetItem(first)
        item_ref = QTableWidgetItem(ref)
        item_link = QTableWidgetItem(link)
        item_loc = QTableWidgetItem(loc)

        self.tableWidget.setItem(row, 0, item_title)
        self.tableWidget.setItem(row, 1, item_chn_title)
        self.tableWidget.setItem(row, 2, item_first)
        self.tableWidget.setItem(row, 3, item_ref)
        self.tableWidget.setItem(row, 4, item_loc)
        self.tableWidget.setItem(row, 5, item_link)

    def crawler_volume(self):
        self.label_2.setText("输入期数(101-290)")  # 设置期数范围
        pass

    def crawler_papers(self):
        url = "https://www.sciencedirect.com/journal/water-research/vol/180/suppl/C"
        self.data = {}
        # self.df_csv = pd.DataFrame(columns=["标题", "中文标题", "第一作者", "通讯作者", "第一单位", "链接"])
        self.tableWidget.setRowCount(0)  # 先清空表格

        crawler = self.get_results(url)

        pass

    def output_csv(self):  # 导出csv
        open_path = QFileDialog.getExistingDirectory(self.pushButton_2, '选择路径')
        if open_path:
            with open(open_path + '/爬虫结果.json', 'w', encoding='utf8') as f:
                json.dump(self.data, f, ensure_ascii=False)

            transcsv(open_path + '/爬虫结果.json', open_path + '/爬虫结果.csv')
            QMessageBox.information(self.pushButton_2, "环境科研小助手", "导出完成！")
        pass

    # 爬虫函数
    def author_info(self, result):
        authors = {'一作': [], '通讯': [], '其他': []}
        while True:
            test = re.findall(self.regex1, result[2:])
            if not test:
                break
            else:
                result = test[0]
        # print(result)
        auths = re.findall(self.regex2, result)
        auths_str = auths[0][11:]
        refs = re.findall('\{.*?\}', auths_str)

        # 提取每个作者的信息dict并print
        for i in range(len(refs)):
            refs[i] = json.loads(refs[i])  # 使refs[i]从str->dict
            name = refs[i]['givenName'] + ' ' + refs[i]['surname']

            if 'cor1' in refs[i]['refs'] or 'cor2' in refs[i]['refs']:
                authors['通讯'].append(name)

            if refs[i]['id'] == 'auth-0':
                authors['一作'].append(name)

            authors['其他'].append(name)

        for auth in authors['其他']:
            if auth in authors['一作'] or auth in authors['通讯']:
                authors['其他'].remove(auth)

        return authors

    def get_results(self, url):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36',
        }

        # url = "https://www.sciencedirect.com/journal/water-research/vol/180/suppl/C"
        self.url = url
        self.html = requests.get(self.url, headers=self.headers)

        self.soup = BeautifulSoup(self.html.content, features='lxml')

        self.title = self.soup.find_all('span', {'class': 'js-article-title'})
        self.name = self.soup.find_all('div', {'class': 'text-s u-clr-grey8 js-article__item__authors'})
        self.link = self.soup.find_all('a', {'class': 'anchor article-content-title u-margin-xs-top u-margin-s-bottom'},
                                       href=True)
        self.i = 0
        self.count = 0

        # 提取网页中存储各paper附属信息的内容并用正则化提取所需片段，主要提取authors这个字典
        self.otherinfo = self.soup.find_all(type="application/json")
        self.auth = self.soup.find_all('auth')
        self.soup2 = self.otherinfo[0]
        self.soup2_str = self.soup2.contents[0].replace('\\', '')
        self.soup2_str = self.soup2_str[1:-1]

        # results = 正则化得到一个list，各元素对应每篇文章的信息
        self.regex1 = '\"title\".*?\"authors\"\:\[\{.*?\}\]'
        self.regex2 = '\"authors\"\:\[\{.*\}'
        self.results = re.findall(self.regex1, self.soup2_str)

        res = {'标题': [], '中文标题': [], '作者': [], '链接': []}
        for title, link, num in zip(self.title, self.link, range(len(self.title))):
            paper_title = title.get_text()

            res['标题'].append(title.get_text())
            url = 'http://fanyi.youdao.com/translate?smartresult=' \
                       'dict&smartresult=rule&sessionFrom=https://www.baidu.com/link'

            data = {'from': 'AUTO', 'to': 'AUTO', 'smartresult': 'dict', 'client': 'fanyideskweb',
                    'salt': '1500092479607',
                    'sign': 'c98235a85b213d482b8e65f6b1065e26', 'doctype': 'json', 'version': '2.1',
                    'keyfrom': 'fanyi.web',
                    'action': 'FY_BY_CL1CKBUTTON', 'typoResult': 'true', 'i': title.get_text()}

            data = urllib.parse.urlencode(data).encode('utf-8')
            response = urllib.request.urlopen(url, data)
            html = response.read().decode('utf-8')
            ta = json.loads(html)

            res['中文标题'].append(ta['translateResult'][0][0]['tgt'])
            chn_title = ta['translateResult'][0][0]['tgt']

            if title.get_text() == 'Editorial Board':
                res['作者'].append('None')
                first = 'None'
                ref = 'None'
                self.count += 1
            elif title.get_text() == 'Publisher\'s Note':  # 不是note
                res['作者'].append('None')
                first = 'None'
                ref = 'None'
                self.count += 1
            else:
                # print('作者：', name[i-count].get_text())
                res['作者'].append(self.author_info(self.results[self.i - self.count]))
                authors = self.author_info(self.results[self.i - self.count])
                first = ', '.join(i for i in authors['一作'])
                ref = ', '.join(i for i in authors['通讯'])

            res['链接'].append('https://www.sciencedirect.com{}'.format(link['href']))
            link = 'https://www.sciencedirect.com' + link['href']

            self.i += 1

            QApplication.processEvents()
            self.progressBar.setValue((num + 1) / len(self.title) * 100)
            self.table_insert(paper_title, chn_title, first, ref, link, loc='None')
            self.data[num] = [paper_title, chn_title, first, ref, 'None', link]

        return res


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ui = Ui_MainWindow()
    main_window = QtWidgets.QMainWindow()
    ui.setupUi(main_window)
    main_window.show()
    sys.exit(app.exec_())
